// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Project1_Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250714072548_YourMigrationName")]
    partial class YourMigrationName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5df0b1-6704-4487-bb58-6eacfe5aacdc"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2cff1266-8f44-4a5c-8ff9-90c81240ca50"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd658b1a-bcf1-4f75-9ea9-66ba2cbc0e9d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62302311-99ee-4ad0-af80-1a3262dc5c2b",
                            DateRegistered = new DateTime(2025, 4, 5, 7, 25, 47, 587, DateTimeKind.Utc).AddTicks(2082),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Site",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI5YOgpidYR3mHWN3IpQWHvEHFVsRzw0MxKBLS48FPF3f2mMpn+og1aUkYFEdtCe5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "31E34A5C-AF5E-4C48-B66D-4D6282FAC846",
                            ShippingAddressCity = "Control Panel",
                            ShippingAddressCountry = "SERVERLAND",
                            ShippingAddressPostalCode = "00001",
                            ShippingAddressState = "SYS",
                            ShippingAddressStreet = "1 Admin Way",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = new Guid("29c1f5be-7c4b-41b2-91cc-612970ba7d76"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16742f2c-1951-408c-9848-99f55ae77f21",
                            DateRegistered = new DateTime(2025, 5, 15, 7, 25, 47, 681, DateTimeKind.Utc).AddTicks(2716),
                            Email = "alice.w@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Wonder",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.W@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.W@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH3wlVGve6UAyX11pxj3rU2JaaNE6c81lFrPjWLRUrwvhyknMCdgcTAxHL2lg6TjzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1A5D3862-3729-4D40-8AF5-A3867F936656",
                            ShippingAddressCity = "Anytown",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "90210",
                            ShippingAddressState = "CA",
                            ShippingAddressStreet = "123 Main St",
                            TwoFactorEnabled = false,
                            UserName = "alice.w@example.com"
                        },
                        new
                        {
                            Id = new Guid("c0a270ef-a2a2-46ec-bdbf-839f1c711940"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebe75f49-3c9c-435a-94bf-cc4f92c198f6",
                            DateRegistered = new DateTime(2025, 5, 25, 7, 25, 47, 788, DateTimeKind.Utc).AddTicks(9614),
                            Email = "bob.builder@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            LastName = "Builder",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.BUILDER@EXAMPLE.COM",
                            NormalizedUserName = "BOB.BUILDER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPwhzplfhg0cDbh1RxoyVJ6d21XgCmkarSFZffMKmmFIRTFr19j+fOV49ocdUBv6vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "902921F7-883A-413C-AE67-F317A99182DB",
                            ShippingAddressCity = "Otherville",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "10001",
                            ShippingAddressState = "NY",
                            ShippingAddressStreet = "456 Oak Ave",
                            TwoFactorEnabled = false,
                            UserName = "bob.builder@example.com"
                        });
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentTransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22b803f9-3cd6-485a-8d0d-5ca8d258eb1d"),
                            OrderDate = new DateTime(2025, 7, 7, 7, 25, 47, 789, DateTimeKind.Utc).AddTicks(1107),
                            PaymentTransactionId = "txn_alice_123seed",
                            ShippingAddressCity = "Anytown",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "90210",
                            ShippingAddressState = "CA",
                            ShippingAddressStreet = "123 Main St",
                            Status = 3,
                            TotalAmount = 199.99m,
                            UserId = new Guid("29c1f5be-7c4b-41b2-91cc-612970ba7d76")
                        },
                        new
                        {
                            Id = new Guid("ee32b788-ca28-43e1-a5e4-ecbb0e2d29aa"),
                            OrderDate = new DateTime(2025, 7, 11, 7, 25, 47, 789, DateTimeKind.Utc).AddTicks(1319),
                            PaymentTransactionId = "txn_bob_456seed",
                            ShippingAddressCity = "Otherville",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "10001",
                            ShippingAddressState = "NY",
                            ShippingAddressStreet = "456 Oak Ave",
                            Status = 2,
                            TotalAmount = 539.40m,
                            UserId = new Guid("c0a270ef-a2a2-46ec-bdbf-839f1c711940")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("bd658b1a-bcf1-4f75-9ea9-66ba2cbc0e9d"),
                            RoleId = new Guid("2c5df0b1-6704-4487-bb58-6eacfe5aacdc")
                        },
                        new
                        {
                            UserId = new Guid("29c1f5be-7c4b-41b2-91cc-612970ba7d76"),
                            RoleId = new Guid("2cff1266-8f44-4a5c-8ff9-90c81240ca50")
                        },
                        new
                        {
                            UserId = new Guid("c0a270ef-a2a2-46ec-bdbf-839f1c711940"),
                            RoleId = new Guid("2cff1266-8f44-4a5c-8ff9-90c81240ca50")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project1_Api.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a229fb6e-a164-4fab-b82a-4a46a2e5a357"),
                            Description = "Gadgets, devices, and more.",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("f90905d0-7aa7-4e3a-874a-df6c34b44237"),
                            Description = "Fiction, non-fiction, and educational.",
                            Name = "Books"
                        },
                        new
                        {
                            Id = new Guid("6c968ba0-0b61-49e3-91fa-24d0ee7c436b"),
                            Description = "Clothing for all occasions.",
                            Name = "Apparel"
                        });
                });

            modelBuilder.Entity("Project1_Api.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPriceAtPurchase")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("806c81a6-ee40-4adf-a46f-e90da096d826"),
                            OrderId = new Guid("22b803f9-3cd6-485a-8d0d-5ca8d258eb1d"),
                            ProductId = new Guid("d0356126-5777-49bf-8721-d35bc2cfe41c"),
                            Quantity = 1,
                            UnitPriceAtPurchase = 199.99m
                        },
                        new
                        {
                            Id = new Guid("95fd5ecc-73b2-40e4-adbb-b24f653da8f1"),
                            OrderId = new Guid("ee32b788-ca28-43e1-a5e4-ecbb0e2d29aa"),
                            ProductId = new Guid("9834c7b0-5267-4980-b126-259714e8a910"),
                            Quantity = 1,
                            UnitPriceAtPurchase = 499.50m
                        },
                        new
                        {
                            Id = new Guid("94587454-b118-4645-a55b-7235e7b126c9"),
                            OrderId = new Guid("ee32b788-ca28-43e1-a5e4-ecbb0e2d29aa"),
                            ProductId = new Guid("c89cf1bb-80b4-4b98-9d04-fa9c12296860"),
                            Quantity = 2,
                            UnitPriceAtPurchase = 19.95m
                        });
                });

            modelBuilder.Entity("Project1_Api.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0356126-5777-49bf-8721-d35bc2cfe41c"),
                            CategoryId = new Guid("a229fb6e-a164-4fab-b82a-4a46a2e5a357"),
                            DateCreated = new DateTime(2025, 6, 14, 7, 25, 47, 789, DateTimeKind.Utc).AddTicks(788),
                            Description = "Immerse yourself in sound.",
                            ImageUrl = "/images/products/headphones.jpg",
                            IsAvailable = true,
                            Name = "Wireless Noise-Cancelling Headphones",
                            Price = 199.99m,
                            Sku = "ELEC-HDPH-001",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("9834c7b0-5267-4980-b126-259714e8a910"),
                            CategoryId = new Guid("a229fb6e-a164-4fab-b82a-4a46a2e5a357"),
                            DateCreated = new DateTime(2025, 6, 19, 7, 25, 47, 789, DateTimeKind.Utc).AddTicks(797),
                            Description = "Vibrant colors, smart features.",
                            ImageUrl = "/images/products/smart-tv.jpg",
                            IsAvailable = true,
                            Name = "Smart LED TV 55-inch",
                            Price = 499.50m,
                            Sku = "ELEC-TV-002",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = new Guid("b4d3247a-63e3-4bce-a5c2-9ab5d0ea960d"),
                            CategoryId = new Guid("f90905d0-7aa7-4e3a-874a-df6c34b44237"),
                            DateCreated = new DateTime(2025, 6, 24, 7, 25, 47, 789, DateTimeKind.Utc).AddTicks(802),
                            Description = "Three bestselling sci-fi novels.",
                            ImageUrl = "/images/products/scifi-books.jpg",
                            IsAvailable = true,
                            Name = "The Sci-Fi Novel Collection",
                            Price = 29.99m,
                            Sku = "BOOK-SCIFI-001",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("c89cf1bb-80b4-4b98-9d04-fa9c12296860"),
                            CategoryId = new Guid("6c968ba0-0b61-49e3-91fa-24d0ee7c436b"),
                            DateCreated = new DateTime(2025, 6, 29, 7, 25, 47, 789, DateTimeKind.Utc).AddTicks(806),
                            Description = "Comfortable and stylish.",
                            ImageUrl = "/images/products/tshirt-men.jpg",
                            IsAvailable = true,
                            Name = "Men's Classic Cotton T-Shirt",
                            Price = 19.95m,
                            Sku = "APRL-TSHRT-001",
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = new Guid("b71d20a2-f2e5-48e7-85e1-5d4417310efd"),
                            CategoryId = new Guid("6c968ba0-0b61-49e3-91fa-24d0ee7c436b"),
                            DateCreated = new DateTime(2025, 7, 4, 7, 25, 47, 789, DateTimeKind.Utc).AddTicks(810),
                            Description = "Light and airy, perfect for summer.",
                            ImageUrl = "/images/products/dress-women.jpg",
                            IsAvailable = false,
                            Name = "Women's Summer Dress",
                            Price = 45.00m,
                            Sku = "APRL-DRESS-001",
                            StockQuantity = 75
                        });
                });

            modelBuilder.Entity("ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06df002f-5c4a-46c8-81a8-e853cb41337b"),
                            DateAdded = new DateTime(2025, 7, 12, 7, 25, 47, 789, DateTimeKind.Utc).AddTicks(933),
                            ProductId = new Guid("d0356126-5777-49bf-8721-d35bc2cfe41c"),
                            Quantity = 1,
                            UserId = new Guid("29c1f5be-7c4b-41b2-91cc-612970ba7d76")
                        },
                        new
                        {
                            Id = new Guid("26840e5f-2afe-4a57-8ddb-055848990434"),
                            DateAdded = new DateTime(2025, 7, 13, 7, 25, 47, 789, DateTimeKind.Utc).AddTicks(941),
                            ProductId = new Guid("c89cf1bb-80b4-4b98-9d04-fa9c12296860"),
                            Quantity = 2,
                            UserId = new Guid("29c1f5be-7c4b-41b2-91cc-612970ba7d76")
                        },
                        new
                        {
                            Id = new Guid("056ba79a-22ba-4427-97f1-1333854d762e"),
                            DateAdded = new DateTime(2025, 7, 14, 2, 25, 47, 789, DateTimeKind.Utc).AddTicks(1027),
                            ProductId = new Guid("b4d3247a-63e3-4bce-a5c2-9ab5d0ea960d"),
                            Quantity = 1,
                            UserId = new Guid("c0a270ef-a2a2-46ec-bdbf-839f1c711940")
                        });
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project1_Api.Models.OrderItem", b =>
                {
                    b.HasOne("Domain.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1_Api.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project1_Api.Models.Product", b =>
                {
                    b.HasOne("Project1_Api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoppingCartItem", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Project1_Api.Models.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Project1_Api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Project1_Api.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
