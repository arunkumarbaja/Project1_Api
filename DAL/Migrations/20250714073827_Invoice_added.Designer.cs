// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Project1_Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250714073827_Invoice_added")]
    partial class Invoice_added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("60fe8aa1-23bc-4c9d-b559-af0d123479ef"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2d6deb72-68d9-415f-a9d7-11752aeb7b2b"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8665ac0d-942e-4286-bdb0-4a5adb0cce6f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4b09e0f-fd21-4264-8257-5de45b966120",
                            DateRegistered = new DateTime(2025, 4, 5, 7, 38, 25, 564, DateTimeKind.Utc).AddTicks(1330),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Site",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG/wDEMF24LXjcsgKvA/g7LWflaw0cf346lrDpEaBussX4Kj2FYPk8BHoXTUYLGe5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "D2E97A3A-3CFA-4936-8B62-1028AE317165",
                            ShippingAddressCity = "Control Panel",
                            ShippingAddressCountry = "SERVERLAND",
                            ShippingAddressPostalCode = "00001",
                            ShippingAddressState = "SYS",
                            ShippingAddressStreet = "1 Admin Way",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = new Guid("35bfb8f2-1fb0-41ed-8096-bda193ac4fc8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a88e428-8452-4274-87b6-eaf95b462707",
                            DateRegistered = new DateTime(2025, 5, 15, 7, 38, 25, 712, DateTimeKind.Utc).AddTicks(8014),
                            Email = "alice.w@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Wonder",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.W@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.W@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOkRZGEcnjYDp1H+Uz2nHlQDLKA36aQzrDLMY5ZBJ2oGSLsYDOc/8vfzhZwzB7p7dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A8B788F0-B725-426E-86F7-C45F91116214",
                            ShippingAddressCity = "Anytown",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "90210",
                            ShippingAddressState = "CA",
                            ShippingAddressStreet = "123 Main St",
                            TwoFactorEnabled = false,
                            UserName = "alice.w@example.com"
                        },
                        new
                        {
                            Id = new Guid("83ce86b5-6abf-45f3-92d3-d4ab600bd7fa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85cb39b2-915d-4258-b38b-b5eb90003146",
                            DateRegistered = new DateTime(2025, 5, 25, 7, 38, 25, 819, DateTimeKind.Utc).AddTicks(808),
                            Email = "bob.builder@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            LastName = "Builder",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.BUILDER@EXAMPLE.COM",
                            NormalizedUserName = "BOB.BUILDER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEqqsb8dcfASCYeSic8k+29Sq53RpAdGQ2zyMcvr1mysIV9EdsnjVC6H84UZwiFuJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E0D00663-8259-4AA1-B2FF-D861C674A7B1",
                            ShippingAddressCity = "Otherville",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "10001",
                            ShippingAddressState = "NY",
                            ShippingAddressStreet = "456 Oak Ave",
                            TwoFactorEnabled = false,
                            UserName = "bob.builder@example.com"
                        });
                });

            modelBuilder.Entity("Domain.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPriceAtPurchase")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentTransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("257e85c4-714f-4e69-a62f-75e040d9ea73"),
                            OrderDate = new DateTime(2025, 7, 7, 7, 38, 25, 819, DateTimeKind.Utc).AddTicks(2506),
                            PaymentTransactionId = "txn_alice_123seed",
                            ShippingAddressCity = "Anytown",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "90210",
                            ShippingAddressState = "CA",
                            ShippingAddressStreet = "123 Main St",
                            Status = 3,
                            TotalAmount = 199.99m,
                            UserId = new Guid("35bfb8f2-1fb0-41ed-8096-bda193ac4fc8")
                        },
                        new
                        {
                            Id = new Guid("e813e236-a887-46d6-9ed0-304cbd5981b5"),
                            OrderDate = new DateTime(2025, 7, 11, 7, 38, 25, 819, DateTimeKind.Utc).AddTicks(2673),
                            PaymentTransactionId = "txn_bob_456seed",
                            ShippingAddressCity = "Otherville",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "10001",
                            ShippingAddressState = "NY",
                            ShippingAddressStreet = "456 Oak Ave",
                            Status = 2,
                            TotalAmount = 539.40m,
                            UserId = new Guid("83ce86b5-6abf-45f3-92d3-d4ab600bd7fa")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8665ac0d-942e-4286-bdb0-4a5adb0cce6f"),
                            RoleId = new Guid("60fe8aa1-23bc-4c9d-b559-af0d123479ef")
                        },
                        new
                        {
                            UserId = new Guid("35bfb8f2-1fb0-41ed-8096-bda193ac4fc8"),
                            RoleId = new Guid("2d6deb72-68d9-415f-a9d7-11752aeb7b2b")
                        },
                        new
                        {
                            UserId = new Guid("83ce86b5-6abf-45f3-92d3-d4ab600bd7fa"),
                            RoleId = new Guid("2d6deb72-68d9-415f-a9d7-11752aeb7b2b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project1_Api.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb3e85c2-57e5-4bea-bddb-c038ad642772"),
                            Description = "Gadgets, devices, and more.",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("c3d404f5-0389-4702-8928-ec414c490971"),
                            Description = "Fiction, non-fiction, and educational.",
                            Name = "Books"
                        },
                        new
                        {
                            Id = new Guid("e3ada52d-b5ae-4648-8c01-a7bc90cd537b"),
                            Description = "Clothing for all occasions.",
                            Name = "Apparel"
                        });
                });

            modelBuilder.Entity("Project1_Api.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPriceAtPurchase")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7ffddb7-f991-455c-ad00-6abe687f3a1c"),
                            OrderId = new Guid("257e85c4-714f-4e69-a62f-75e040d9ea73"),
                            ProductId = new Guid("dfc24533-574d-4991-a0f7-642348ff505d"),
                            Quantity = 1,
                            UnitPriceAtPurchase = 199.99m
                        },
                        new
                        {
                            Id = new Guid("ace75cf8-2ebf-4a93-a86c-1554e3dbb56b"),
                            OrderId = new Guid("e813e236-a887-46d6-9ed0-304cbd5981b5"),
                            ProductId = new Guid("9c83f4d1-1a27-47b1-8863-919078e0e694"),
                            Quantity = 1,
                            UnitPriceAtPurchase = 499.50m
                        },
                        new
                        {
                            Id = new Guid("fb7ec843-1357-4430-8582-2e4c9cbf585f"),
                            OrderId = new Guid("e813e236-a887-46d6-9ed0-304cbd5981b5"),
                            ProductId = new Guid("53415843-74d3-4676-b59d-b3a9a3b277b2"),
                            Quantity = 2,
                            UnitPriceAtPurchase = 19.95m
                        });
                });

            modelBuilder.Entity("Project1_Api.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dfc24533-574d-4991-a0f7-642348ff505d"),
                            CategoryId = new Guid("bb3e85c2-57e5-4bea-bddb-c038ad642772"),
                            DateCreated = new DateTime(2025, 6, 14, 7, 38, 25, 819, DateTimeKind.Utc).AddTicks(1975),
                            Description = "Immerse yourself in sound.",
                            ImageUrl = "/images/products/headphones.jpg",
                            IsAvailable = true,
                            Name = "Wireless Noise-Cancelling Headphones",
                            Price = 199.99m,
                            Sku = "ELEC-HDPH-001",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("9c83f4d1-1a27-47b1-8863-919078e0e694"),
                            CategoryId = new Guid("bb3e85c2-57e5-4bea-bddb-c038ad642772"),
                            DateCreated = new DateTime(2025, 6, 19, 7, 38, 25, 819, DateTimeKind.Utc).AddTicks(2118),
                            Description = "Vibrant colors, smart features.",
                            ImageUrl = "/images/products/smart-tv.jpg",
                            IsAvailable = true,
                            Name = "Smart LED TV 55-inch",
                            Price = 499.50m,
                            Sku = "ELEC-TV-002",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = new Guid("6ea500af-8c4e-44db-8e70-a6568f564c0a"),
                            CategoryId = new Guid("c3d404f5-0389-4702-8928-ec414c490971"),
                            DateCreated = new DateTime(2025, 6, 24, 7, 38, 25, 819, DateTimeKind.Utc).AddTicks(2123),
                            Description = "Three bestselling sci-fi novels.",
                            ImageUrl = "/images/products/scifi-books.jpg",
                            IsAvailable = true,
                            Name = "The Sci-Fi Novel Collection",
                            Price = 29.99m,
                            Sku = "BOOK-SCIFI-001",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("53415843-74d3-4676-b59d-b3a9a3b277b2"),
                            CategoryId = new Guid("e3ada52d-b5ae-4648-8c01-a7bc90cd537b"),
                            DateCreated = new DateTime(2025, 6, 29, 7, 38, 25, 819, DateTimeKind.Utc).AddTicks(2127),
                            Description = "Comfortable and stylish.",
                            ImageUrl = "/images/products/tshirt-men.jpg",
                            IsAvailable = true,
                            Name = "Men's Classic Cotton T-Shirt",
                            Price = 19.95m,
                            Sku = "APRL-TSHRT-001",
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = new Guid("a029009b-2ad2-474c-b6fe-819d0054589d"),
                            CategoryId = new Guid("e3ada52d-b5ae-4648-8c01-a7bc90cd537b"),
                            DateCreated = new DateTime(2025, 7, 4, 7, 38, 25, 819, DateTimeKind.Utc).AddTicks(2136),
                            Description = "Light and airy, perfect for summer.",
                            ImageUrl = "/images/products/dress-women.jpg",
                            IsAvailable = false,
                            Name = "Women's Summer Dress",
                            Price = 45.00m,
                            Sku = "APRL-DRESS-001",
                            StockQuantity = 75
                        });
                });

            modelBuilder.Entity("ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ac5c8ca-13fc-478f-b779-6e97a2632d77"),
                            DateAdded = new DateTime(2025, 7, 12, 7, 38, 25, 819, DateTimeKind.Utc).AddTicks(2294),
                            ProductId = new Guid("dfc24533-574d-4991-a0f7-642348ff505d"),
                            Quantity = 1,
                            UserId = new Guid("35bfb8f2-1fb0-41ed-8096-bda193ac4fc8")
                        },
                        new
                        {
                            Id = new Guid("91f7f2b7-5b2d-4e94-b26b-9f563f9673e5"),
                            DateAdded = new DateTime(2025, 7, 13, 7, 38, 25, 819, DateTimeKind.Utc).AddTicks(2300),
                            ProductId = new Guid("53415843-74d3-4676-b59d-b3a9a3b277b2"),
                            Quantity = 2,
                            UserId = new Guid("35bfb8f2-1fb0-41ed-8096-bda193ac4fc8")
                        },
                        new
                        {
                            Id = new Guid("ba9773d8-a289-41b5-a26c-efb1797d132f"),
                            DateAdded = new DateTime(2025, 7, 14, 2, 38, 25, 819, DateTimeKind.Utc).AddTicks(2390),
                            ProductId = new Guid("6ea500af-8c4e-44db-8e70-a6568f564c0a"),
                            Quantity = 1,
                            UserId = new Guid("83ce86b5-6abf-45f3-92d3-d4ab600bd7fa")
                        });
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project1_Api.Models.OrderItem", b =>
                {
                    b.HasOne("Domain.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1_Api.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project1_Api.Models.Product", b =>
                {
                    b.HasOne("Project1_Api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoppingCartItem", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Project1_Api.Models.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Project1_Api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Project1_Api.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
