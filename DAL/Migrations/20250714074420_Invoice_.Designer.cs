// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Project1_Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250714074420_Invoice_")]
    partial class Invoice_
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b35a0423-d0be-49f4-a9ed-3b5a9a1d2a54"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2d40c3a2-5dfb-422d-9f8e-bfbd5d5a9d1f"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d4e4678-29d4-4aab-8f56-4725162eb42b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22bb12c5-27ce-4e29-bfd2-b865fb6b427c",
                            DateRegistered = new DateTime(2025, 4, 5, 7, 44, 19, 724, DateTimeKind.Utc).AddTicks(787),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Site",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB2qncL7+eEntSsQVH5qTpbCEH7HX7kmaBxDPws9RGRLzzz4VtysShkOfVfmwmPl+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5FE67096-E2C5-4114-BE60-AEF8C61098FA",
                            ShippingAddressCity = "Control Panel",
                            ShippingAddressCountry = "SERVERLAND",
                            ShippingAddressPostalCode = "00001",
                            ShippingAddressState = "SYS",
                            ShippingAddressStreet = "1 Admin Way",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = new Guid("6449ba12-6618-4ddc-a297-02b02461b592"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8d0aa3b-4796-414a-aef7-a28d1ed00a14",
                            DateRegistered = new DateTime(2025, 5, 15, 7, 44, 19, 812, DateTimeKind.Utc).AddTicks(2159),
                            Email = "alice.w@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Wonder",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.W@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.W@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDmf2biRN8jnVLbONKQ4fewPdg+cIE6WgkFT7T/JS2fhRz5DSSyEC2fASZI4zl05Bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8B2D079F-DB76-4539-9B0B-0C404C3ABCBC",
                            ShippingAddressCity = "Anytown",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "90210",
                            ShippingAddressState = "CA",
                            ShippingAddressStreet = "123 Main St",
                            TwoFactorEnabled = false,
                            UserName = "alice.w@example.com"
                        },
                        new
                        {
                            Id = new Guid("445a39a0-beda-40fb-a1e7-81c7c503ea9f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7562c3fc-c40f-440e-839f-361e1143c593",
                            DateRegistered = new DateTime(2025, 5, 25, 7, 44, 19, 899, DateTimeKind.Utc).AddTicks(3023),
                            Email = "bob.builder@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            LastName = "Builder",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.BUILDER@EXAMPLE.COM",
                            NormalizedUserName = "BOB.BUILDER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDpdDy06H93l5lmNtY4xAPp3SwWOBE/pJQ1eooKTuejEPfAsfHKt1ABfR7rxw1BpCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DB0C94FB-CDA2-4683-AFCF-E61595F33706",
                            ShippingAddressCity = "Otherville",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "10001",
                            ShippingAddressState = "NY",
                            ShippingAddressStreet = "456 Oak Ave",
                            TwoFactorEnabled = false,
                            UserName = "bob.builder@example.com"
                        });
                });

            modelBuilder.Entity("Domain.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPriceAtPurchase")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentTransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("182648fc-37ce-4764-b560-cc145be26675"),
                            OrderDate = new DateTime(2025, 7, 7, 7, 44, 19, 899, DateTimeKind.Utc).AddTicks(4259),
                            PaymentTransactionId = "txn_alice_123seed",
                            ShippingAddressCity = "Anytown",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "90210",
                            ShippingAddressState = "CA",
                            ShippingAddressStreet = "123 Main St",
                            Status = 3,
                            TotalAmount = 199.99m,
                            UserId = new Guid("6449ba12-6618-4ddc-a297-02b02461b592")
                        },
                        new
                        {
                            Id = new Guid("9b54f026-e3c6-4c9b-bf49-e91bcde8a37f"),
                            OrderDate = new DateTime(2025, 7, 11, 7, 44, 19, 899, DateTimeKind.Utc).AddTicks(7704),
                            PaymentTransactionId = "txn_bob_456seed",
                            ShippingAddressCity = "Otherville",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "10001",
                            ShippingAddressState = "NY",
                            ShippingAddressStreet = "456 Oak Ave",
                            Status = 2,
                            TotalAmount = 539.40m,
                            UserId = new Guid("445a39a0-beda-40fb-a1e7-81c7c503ea9f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0d4e4678-29d4-4aab-8f56-4725162eb42b"),
                            RoleId = new Guid("b35a0423-d0be-49f4-a9ed-3b5a9a1d2a54")
                        },
                        new
                        {
                            UserId = new Guid("6449ba12-6618-4ddc-a297-02b02461b592"),
                            RoleId = new Guid("2d40c3a2-5dfb-422d-9f8e-bfbd5d5a9d1f")
                        },
                        new
                        {
                            UserId = new Guid("445a39a0-beda-40fb-a1e7-81c7c503ea9f"),
                            RoleId = new Guid("2d40c3a2-5dfb-422d-9f8e-bfbd5d5a9d1f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project1_Api.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bed1ed01-5445-4f14-b9f4-5c72c49cd4c7"),
                            Description = "Gadgets, devices, and more.",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("76960d7a-7323-4bb9-9451-caf91de6d087"),
                            Description = "Fiction, non-fiction, and educational.",
                            Name = "Books"
                        },
                        new
                        {
                            Id = new Guid("781c50cb-955c-40de-b0ec-1f542e0090c4"),
                            Description = "Clothing for all occasions.",
                            Name = "Apparel"
                        });
                });

            modelBuilder.Entity("Project1_Api.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPriceAtPurchase")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6ac276c-32bb-45b9-91fa-27f33d57e6fc"),
                            OrderId = new Guid("182648fc-37ce-4764-b560-cc145be26675"),
                            ProductId = new Guid("859dd085-223b-4f0e-a8b5-ddc4912aceef"),
                            Quantity = 1,
                            UnitPriceAtPurchase = 199.99m
                        },
                        new
                        {
                            Id = new Guid("e65730f9-8123-46b5-8c40-2aa29b80f9df"),
                            OrderId = new Guid("9b54f026-e3c6-4c9b-bf49-e91bcde8a37f"),
                            ProductId = new Guid("163054c6-eaf3-46e0-bbdd-ba10bb80829a"),
                            Quantity = 1,
                            UnitPriceAtPurchase = 499.50m
                        },
                        new
                        {
                            Id = new Guid("899b3591-d522-430d-a65d-1ff4c8954f85"),
                            OrderId = new Guid("9b54f026-e3c6-4c9b-bf49-e91bcde8a37f"),
                            ProductId = new Guid("e494daf4-f457-4e63-a1c1-d7b1b41aabb4"),
                            Quantity = 2,
                            UnitPriceAtPurchase = 19.95m
                        });
                });

            modelBuilder.Entity("Project1_Api.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("859dd085-223b-4f0e-a8b5-ddc4912aceef"),
                            CategoryId = new Guid("bed1ed01-5445-4f14-b9f4-5c72c49cd4c7"),
                            DateCreated = new DateTime(2025, 6, 14, 7, 44, 19, 899, DateTimeKind.Utc).AddTicks(3927),
                            Description = "Immerse yourself in sound.",
                            ImageUrl = "/images/products/headphones.jpg",
                            IsAvailable = true,
                            Name = "Wireless Noise-Cancelling Headphones",
                            Price = 199.99m,
                            Sku = "ELEC-HDPH-001",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("163054c6-eaf3-46e0-bbdd-ba10bb80829a"),
                            CategoryId = new Guid("bed1ed01-5445-4f14-b9f4-5c72c49cd4c7"),
                            DateCreated = new DateTime(2025, 6, 19, 7, 44, 19, 899, DateTimeKind.Utc).AddTicks(3931),
                            Description = "Vibrant colors, smart features.",
                            ImageUrl = "/images/products/smart-tv.jpg",
                            IsAvailable = true,
                            Name = "Smart LED TV 55-inch",
                            Price = 499.50m,
                            Sku = "ELEC-TV-002",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = new Guid("e73cdf56-7c04-4fa8-a8ed-8992eae0a562"),
                            CategoryId = new Guid("76960d7a-7323-4bb9-9451-caf91de6d087"),
                            DateCreated = new DateTime(2025, 6, 24, 7, 44, 19, 899, DateTimeKind.Utc).AddTicks(3937),
                            Description = "Three bestselling sci-fi novels.",
                            ImageUrl = "/images/products/scifi-books.jpg",
                            IsAvailable = true,
                            Name = "The Sci-Fi Novel Collection",
                            Price = 29.99m,
                            Sku = "BOOK-SCIFI-001",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("e494daf4-f457-4e63-a1c1-d7b1b41aabb4"),
                            CategoryId = new Guid("781c50cb-955c-40de-b0ec-1f542e0090c4"),
                            DateCreated = new DateTime(2025, 6, 29, 7, 44, 19, 899, DateTimeKind.Utc).AddTicks(3944),
                            Description = "Comfortable and stylish.",
                            ImageUrl = "/images/products/tshirt-men.jpg",
                            IsAvailable = true,
                            Name = "Men's Classic Cotton T-Shirt",
                            Price = 19.95m,
                            Sku = "APRL-TSHRT-001",
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = new Guid("b03f6ac2-4929-4100-ada2-0a50f58a52cb"),
                            CategoryId = new Guid("781c50cb-955c-40de-b0ec-1f542e0090c4"),
                            DateCreated = new DateTime(2025, 7, 4, 7, 44, 19, 899, DateTimeKind.Utc).AddTicks(3948),
                            Description = "Light and airy, perfect for summer.",
                            ImageUrl = "/images/products/dress-women.jpg",
                            IsAvailable = false,
                            Name = "Women's Summer Dress",
                            Price = 45.00m,
                            Sku = "APRL-DRESS-001",
                            StockQuantity = 75
                        });
                });

            modelBuilder.Entity("ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f2efbfd-52f5-4b93-b899-3b33fc048aab"),
                            DateAdded = new DateTime(2025, 7, 12, 7, 44, 19, 899, DateTimeKind.Utc).AddTicks(4129),
                            ProductId = new Guid("859dd085-223b-4f0e-a8b5-ddc4912aceef"),
                            Quantity = 1,
                            UserId = new Guid("6449ba12-6618-4ddc-a297-02b02461b592")
                        },
                        new
                        {
                            Id = new Guid("0240a0cd-b256-437b-9dac-e37ad9f17d71"),
                            DateAdded = new DateTime(2025, 7, 13, 7, 44, 19, 899, DateTimeKind.Utc).AddTicks(4134),
                            ProductId = new Guid("e494daf4-f457-4e63-a1c1-d7b1b41aabb4"),
                            Quantity = 2,
                            UserId = new Guid("6449ba12-6618-4ddc-a297-02b02461b592")
                        },
                        new
                        {
                            Id = new Guid("81f1516d-5780-4d9a-8de5-79f31d1e0d74"),
                            DateAdded = new DateTime(2025, 7, 14, 2, 44, 19, 899, DateTimeKind.Utc).AddTicks(4206),
                            ProductId = new Guid("e73cdf56-7c04-4fa8-a8ed-8992eae0a562"),
                            Quantity = 1,
                            UserId = new Guid("445a39a0-beda-40fb-a1e7-81c7c503ea9f")
                        });
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project1_Api.Models.OrderItem", b =>
                {
                    b.HasOne("Domain.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1_Api.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project1_Api.Models.Product", b =>
                {
                    b.HasOne("Project1_Api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoppingCartItem", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Project1_Api.Models.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Project1_Api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Project1_Api.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
