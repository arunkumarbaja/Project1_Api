// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Project1_Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("846ff114-dfc6-451d-925f-5dcfea457c8a"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("3e860fe9-f0e9-4b51-9061-2d051fe48911"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9bdbb0b3-1cb9-4c3f-8ca6-6d0b1d1ed7fb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "613633ce-088b-4a27-8ad6-b0e25a768496",
                            DateRegistered = new DateTime(2025, 3, 5, 16, 52, 25, 335, DateTimeKind.Utc).AddTicks(9317),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Site",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL/Cbhqbze2wBridhAq3E14OVtaq4Clp/8E2UEfU2KoQi1RqdmcK5/kl5hGeeKdghw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30DAC99F-98B0-4B0C-A224-55AEE16069D5",
                            ShippingAddressCity = "Control Panel",
                            ShippingAddressCountry = "SERVERLAND",
                            ShippingAddressPostalCode = "00001",
                            ShippingAddressState = "SYS",
                            ShippingAddressStreet = "1 Admin Way",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = new Guid("32131d27-4858-4e27-9ee7-f780cbc947a1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03aaaaf2-873c-4362-9e51-783220a4c785",
                            DateRegistered = new DateTime(2025, 4, 14, 16, 52, 25, 446, DateTimeKind.Utc).AddTicks(3092),
                            Email = "alice.w@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Wonder",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.W@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.W@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEISIPavQ7zZGk42nVhYD9Xmk90QGUdLm3bXRxZtvyKZomus5mJSfwg98ujFGYUY+7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33A4DA2D-ABA2-4D1A-B4E4-6C97D50D8BD7",
                            ShippingAddressCity = "Anytown",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "90210",
                            ShippingAddressState = "CA",
                            ShippingAddressStreet = "123 Main St",
                            TwoFactorEnabled = false,
                            UserName = "alice.w@example.com"
                        },
                        new
                        {
                            Id = new Guid("7b70dd23-2a99-4c84-a5f2-a0a9ca8614b9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "663ea6cb-6187-4aa8-a700-cedf0af3238e",
                            DateRegistered = new DateTime(2025, 4, 24, 16, 52, 25, 538, DateTimeKind.Utc).AddTicks(685),
                            Email = "bob.builder@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            LastName = "Builder",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.BUILDER@EXAMPLE.COM",
                            NormalizedUserName = "BOB.BUILDER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJY6q44qCDPh/45QSLNIZ95yf5RS2kP8YBXG35WHYsUr6Q9idVQRNEsM0G2Q9CAOGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2A429E3D-B6ED-4B49-A70F-68CB83081556",
                            ShippingAddressCity = "Otherville",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "10001",
                            ShippingAddressState = "NY",
                            ShippingAddressStreet = "456 Oak Ave",
                            TwoFactorEnabled = false,
                            UserName = "bob.builder@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("9bdbb0b3-1cb9-4c3f-8ca6-6d0b1d1ed7fb"),
                            RoleId = new Guid("846ff114-dfc6-451d-925f-5dcfea457c8a")
                        },
                        new
                        {
                            UserId = new Guid("32131d27-4858-4e27-9ee7-f780cbc947a1"),
                            RoleId = new Guid("3e860fe9-f0e9-4b51-9061-2d051fe48911")
                        },
                        new
                        {
                            UserId = new Guid("7b70dd23-2a99-4c84-a5f2-a0a9ca8614b9"),
                            RoleId = new Guid("3e860fe9-f0e9-4b51-9061-2d051fe48911")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentTransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bf06f55-c94c-4df3-a512-06def363df93"),
                            OrderDate = new DateTime(2025, 6, 6, 16, 52, 25, 538, DateTimeKind.Utc).AddTicks(2134),
                            PaymentTransactionId = "txn_alice_123seed",
                            ShippingAddressCity = "Anytown",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "90210",
                            ShippingAddressState = "CA",
                            ShippingAddressStreet = "123 Main St",
                            Status = 3,
                            TotalAmount = 199.99m,
                            UserId = new Guid("32131d27-4858-4e27-9ee7-f780cbc947a1")
                        },
                        new
                        {
                            Id = new Guid("8701c5d2-d44c-44b5-94cb-99769205f2c2"),
                            OrderDate = new DateTime(2025, 6, 10, 16, 52, 25, 538, DateTimeKind.Utc).AddTicks(2367),
                            PaymentTransactionId = "txn_bob_456seed",
                            ShippingAddressCity = "Otherville",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "10001",
                            ShippingAddressState = "NY",
                            ShippingAddressStreet = "456 Oak Ave",
                            Status = 2,
                            TotalAmount = 539.40m,
                            UserId = new Guid("7b70dd23-2a99-4c84-a5f2-a0a9ca8614b9")
                        });
                });

            modelBuilder.Entity("Project1.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46357b0b-5a1c-4fa7-aecc-ad8cd80b060b"),
                            Description = "Gadgets, devices, and more.",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("f81be342-0ef1-4822-8fae-c2c13377be76"),
                            Description = "Fiction, non-fiction, and educational.",
                            Name = "Books"
                        },
                        new
                        {
                            Id = new Guid("f4d659ae-995a-4519-add9-e839052b51d1"),
                            Description = "Clothing for all occasions.",
                            Name = "Apparel"
                        });
                });

            modelBuilder.Entity("Project1.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPriceAtPurchase")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bd6cca9-1b58-481f-bac5-6027a2a79de8"),
                            OrderId = new Guid("2bf06f55-c94c-4df3-a512-06def363df93"),
                            ProductId = new Guid("96328a9a-b2dc-4b2e-bc6c-b1c98c925bc1"),
                            Quantity = 1,
                            UnitPriceAtPurchase = 199.99m
                        },
                        new
                        {
                            Id = new Guid("da57d8bf-f5b6-43e7-b4bb-03b183c89750"),
                            OrderId = new Guid("8701c5d2-d44c-44b5-94cb-99769205f2c2"),
                            ProductId = new Guid("91cbd587-60ab-4805-9faa-5037c1c94b4c"),
                            Quantity = 1,
                            UnitPriceAtPurchase = 499.50m
                        },
                        new
                        {
                            Id = new Guid("12da3143-03e9-4769-9285-696e263e2637"),
                            OrderId = new Guid("8701c5d2-d44c-44b5-94cb-99769205f2c2"),
                            ProductId = new Guid("21d5bf39-8e23-448a-a8b6-9f286f54a8dc"),
                            Quantity = 2,
                            UnitPriceAtPurchase = 19.95m
                        });
                });

            modelBuilder.Entity("Project1.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96328a9a-b2dc-4b2e-bc6c-b1c98c925bc1"),
                            CategoryId = new Guid("46357b0b-5a1c-4fa7-aecc-ad8cd80b060b"),
                            DateCreated = new DateTime(2025, 5, 14, 16, 52, 25, 538, DateTimeKind.Utc).AddTicks(1634),
                            Description = "Immerse yourself in sound.",
                            ImageUrl = "/images/products/headphones.jpg",
                            IsAvailable = true,
                            Name = "Wireless Noise-Cancelling Headphones",
                            Price = 199.99m,
                            Sku = "ELEC-HDPH-001",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("91cbd587-60ab-4805-9faa-5037c1c94b4c"),
                            CategoryId = new Guid("46357b0b-5a1c-4fa7-aecc-ad8cd80b060b"),
                            DateCreated = new DateTime(2025, 5, 19, 16, 52, 25, 538, DateTimeKind.Utc).AddTicks(1643),
                            Description = "Vibrant colors, smart features.",
                            ImageUrl = "/images/products/smart-tv.jpg",
                            IsAvailable = true,
                            Name = "Smart LED TV 55-inch",
                            Price = 499.50m,
                            Sku = "ELEC-TV-002",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = new Guid("7c320f12-432c-4f76-83ed-42b6c8734526"),
                            CategoryId = new Guid("f81be342-0ef1-4822-8fae-c2c13377be76"),
                            DateCreated = new DateTime(2025, 5, 24, 16, 52, 25, 538, DateTimeKind.Utc).AddTicks(1647),
                            Description = "Three bestselling sci-fi novels.",
                            ImageUrl = "/images/products/scifi-books.jpg",
                            IsAvailable = true,
                            Name = "The Sci-Fi Novel Collection",
                            Price = 29.99m,
                            Sku = "BOOK-SCIFI-001",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("21d5bf39-8e23-448a-a8b6-9f286f54a8dc"),
                            CategoryId = new Guid("f4d659ae-995a-4519-add9-e839052b51d1"),
                            DateCreated = new DateTime(2025, 5, 29, 16, 52, 25, 538, DateTimeKind.Utc).AddTicks(1651),
                            Description = "Comfortable and stylish.",
                            ImageUrl = "/images/products/tshirt-men.jpg",
                            IsAvailable = true,
                            Name = "Men's Classic Cotton T-Shirt",
                            Price = 19.95m,
                            Sku = "APRL-TSHRT-001",
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = new Guid("1e8a8c5d-e047-41fc-a467-082f23888c3b"),
                            CategoryId = new Guid("f4d659ae-995a-4519-add9-e839052b51d1"),
                            DateCreated = new DateTime(2025, 6, 3, 16, 52, 25, 538, DateTimeKind.Utc).AddTicks(1665),
                            Description = "Light and airy, perfect for summer.",
                            ImageUrl = "/images/products/dress-women.jpg",
                            IsAvailable = false,
                            Name = "Women's Summer Dress",
                            Price = 45.00m,
                            Sku = "APRL-DRESS-001",
                            StockQuantity = 75
                        });
                });

            modelBuilder.Entity("ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eac78da5-4a05-4ac7-aaaa-b4da8d8a84be"),
                            DateAdded = new DateTime(2025, 6, 11, 16, 52, 25, 538, DateTimeKind.Utc).AddTicks(1882),
                            ProductId = new Guid("96328a9a-b2dc-4b2e-bc6c-b1c98c925bc1"),
                            Quantity = 1,
                            UserId = new Guid("32131d27-4858-4e27-9ee7-f780cbc947a1")
                        },
                        new
                        {
                            Id = new Guid("c9ccdb89-0c06-43f0-97c6-adb8d46a947f"),
                            DateAdded = new DateTime(2025, 6, 12, 16, 52, 25, 538, DateTimeKind.Utc).AddTicks(1901),
                            ProductId = new Guid("21d5bf39-8e23-448a-a8b6-9f286f54a8dc"),
                            Quantity = 2,
                            UserId = new Guid("32131d27-4858-4e27-9ee7-f780cbc947a1")
                        },
                        new
                        {
                            Id = new Guid("d3318fdc-a53c-430e-8084-b151a0a2dab2"),
                            DateAdded = new DateTime(2025, 6, 13, 11, 52, 25, 538, DateTimeKind.Utc).AddTicks(1997),
                            ProductId = new Guid("7c320f12-432c-4f76-83ed-42b6c8734526"),
                            Quantity = 1,
                            UserId = new Guid("7b70dd23-2a99-4c84-a5f2-a0a9ca8614b9")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project1.Models.OrderItem", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project1.Models.Product", b =>
                {
                    b.HasOne("Project1.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoppingCartItem", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Project1.Models.Product", null)
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Project1.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Project1.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
