// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project1.Data;

#nullable disable

namespace Project1_Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250605103234_Changed_3")]
    partial class Changed_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d4d65a3-68ea-4959-9f71-5ee64baccbfe"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f8334bf9-f3bf-4162-b765-b11bca6a6c84"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43f8af90-4d78-4c12-8365-ba159decfbad"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a955b777-741e-48c4-a4e7-0ea5068abc73",
                            DateRegistered = new DateTime(2025, 2, 25, 10, 32, 32, 791, DateTimeKind.Utc).AddTicks(4701),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Site",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDmBtkUjUCL3pFtGpmPtTbw1t1RXglR3tkEz/ktyk721efAPHD4F2XXnX5DKMwVkmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13F0391D-5A4A-4903-A1A0-E0CE1E9EF00A",
                            ShippingAddressCity = "Control Panel",
                            ShippingAddressCountry = "SERVERLAND",
                            ShippingAddressPostalCode = "00001",
                            ShippingAddressState = "SYS",
                            ShippingAddressStreet = "1 Admin Way",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = new Guid("23476a76-c69a-4bef-8c68-467832b72c4f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93b591d2-b268-4f84-ae0f-f5254f56ac09",
                            DateRegistered = new DateTime(2025, 4, 6, 10, 32, 32, 937, DateTimeKind.Utc).AddTicks(8701),
                            Email = "alice.w@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Wonder",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.W@EXAMPLE.COM",
                            NormalizedUserName = "ALICE.W@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFDf4v6M56fnS/7MFTzWNRC9n+lUrbMDA6WGqYaFBoIL9QX4/fkM/kPwKSfalzD80w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56C8CAF4-BD83-4742-8D2E-1B64D704C9C9",
                            ShippingAddressCity = "Anytown",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "90210",
                            ShippingAddressState = "CA",
                            ShippingAddressStreet = "123 Main St",
                            TwoFactorEnabled = false,
                            UserName = "alice.w@example.com"
                        },
                        new
                        {
                            Id = new Guid("64d8122e-5e3c-4ba8-ad31-0709286d9783"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57338123-d32e-4143-8b84-bd00e1f87870",
                            DateRegistered = new DateTime(2025, 4, 16, 10, 32, 33, 79, DateTimeKind.Utc).AddTicks(415),
                            Email = "bob.builder@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            LastName = "Builder",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.BUILDER@EXAMPLE.COM",
                            NormalizedUserName = "BOB.BUILDER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJXXOuHaBcx/iKKKct4H1IP7tBv4vfA1YHxrwEonqz/KoMe9eNsNLSi8j2XmYWzAcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "157546A4-0F03-4366-974A-10DCB2315F45",
                            ShippingAddressCity = "Otherville",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "10001",
                            ShippingAddressState = "NY",
                            ShippingAddressStreet = "456 Oak Ave",
                            TwoFactorEnabled = false,
                            UserName = "bob.builder@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("43f8af90-4d78-4c12-8365-ba159decfbad"),
                            RoleId = new Guid("4d4d65a3-68ea-4959-9f71-5ee64baccbfe")
                        },
                        new
                        {
                            UserId = new Guid("23476a76-c69a-4bef-8c68-467832b72c4f"),
                            RoleId = new Guid("f8334bf9-f3bf-4162-b765-b11bca6a6c84")
                        },
                        new
                        {
                            UserId = new Guid("64d8122e-5e3c-4ba8-ad31-0709286d9783"),
                            RoleId = new Guid("f8334bf9-f3bf-4162-b765-b11bca6a6c84")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentTransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddressCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressPostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShippingAddressState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingAddressStreet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20fe6292-620d-4aaf-9db5-6db7d805f626"),
                            OrderDate = new DateTime(2025, 5, 29, 10, 32, 33, 79, DateTimeKind.Utc).AddTicks(2113),
                            PaymentTransactionId = "txn_alice_123seed",
                            ShippingAddressCity = "Anytown",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "90210",
                            ShippingAddressState = "CA",
                            ShippingAddressStreet = "123 Main St",
                            Status = 3,
                            TotalAmount = 199.99m,
                            UserId = new Guid("23476a76-c69a-4bef-8c68-467832b72c4f")
                        },
                        new
                        {
                            Id = new Guid("cd34ec29-d0d6-4ddd-981d-f43a609a2374"),
                            OrderDate = new DateTime(2025, 6, 2, 10, 32, 33, 79, DateTimeKind.Utc).AddTicks(2302),
                            PaymentTransactionId = "txn_bob_456seed",
                            ShippingAddressCity = "Otherville",
                            ShippingAddressCountry = "USA",
                            ShippingAddressPostalCode = "10001",
                            ShippingAddressState = "NY",
                            ShippingAddressStreet = "456 Oak Ave",
                            Status = 2,
                            TotalAmount = 539.40m,
                            UserId = new Guid("64d8122e-5e3c-4ba8-ad31-0709286d9783")
                        });
                });

            modelBuilder.Entity("Project1.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("218545d9-b2f5-4766-8e0e-8a3385c0fc6d"),
                            Description = "Gadgets, devices, and more.",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("c3ff0dbd-0579-40c9-b545-080ddf0592c3"),
                            Description = "Fiction, non-fiction, and educational.",
                            Name = "Books"
                        },
                        new
                        {
                            Id = new Guid("e83019c1-0ac6-46da-bca9-6e8962247266"),
                            Description = "Clothing for all occasions.",
                            Name = "Apparel"
                        });
                });

            modelBuilder.Entity("Project1.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPriceAtPurchase")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("514856ea-0c52-43ba-964c-85881381dd44"),
                            OrderId = new Guid("20fe6292-620d-4aaf-9db5-6db7d805f626"),
                            ProductId = new Guid("a3f1d105-f357-4173-9a62-be533aa7dd99"),
                            Quantity = 1,
                            UnitPriceAtPurchase = 199.99m
                        },
                        new
                        {
                            Id = new Guid("4d8a5e29-a365-4f1d-81c3-f76122dbd52f"),
                            OrderId = new Guid("cd34ec29-d0d6-4ddd-981d-f43a609a2374"),
                            ProductId = new Guid("c751e199-9a58-4619-a331-24390f30a311"),
                            Quantity = 1,
                            UnitPriceAtPurchase = 499.50m
                        },
                        new
                        {
                            Id = new Guid("f8f30353-10a8-46e9-81c8-f71ad6d6e82a"),
                            OrderId = new Guid("cd34ec29-d0d6-4ddd-981d-f43a609a2374"),
                            ProductId = new Guid("e6097226-3a38-4a82-ac10-8ddb5a8819ce"),
                            Quantity = 2,
                            UnitPriceAtPurchase = 19.95m
                        });
                });

            modelBuilder.Entity("Project1.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3f1d105-f357-4173-9a62-be533aa7dd99"),
                            CategoryId = new Guid("218545d9-b2f5-4766-8e0e-8a3385c0fc6d"),
                            DateCreated = new DateTime(2025, 5, 6, 10, 32, 33, 79, DateTimeKind.Utc).AddTicks(1762),
                            Description = "Immerse yourself in sound.",
                            ImageUrl = "/images/products/headphones.jpg",
                            IsAvailable = true,
                            Name = "Wireless Noise-Cancelling Headphones",
                            Price = 199.99m,
                            Sku = "ELEC-HDPH-001",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("c751e199-9a58-4619-a331-24390f30a311"),
                            CategoryId = new Guid("218545d9-b2f5-4766-8e0e-8a3385c0fc6d"),
                            DateCreated = new DateTime(2025, 5, 11, 10, 32, 33, 79, DateTimeKind.Utc).AddTicks(1770),
                            Description = "Vibrant colors, smart features.",
                            ImageUrl = "/images/products/smart-tv.jpg",
                            IsAvailable = true,
                            Name = "Smart LED TV 55-inch",
                            Price = 499.50m,
                            Sku = "ELEC-TV-002",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = new Guid("fe95b471-f8eb-40ad-9400-9b1a9e01f890"),
                            CategoryId = new Guid("c3ff0dbd-0579-40c9-b545-080ddf0592c3"),
                            DateCreated = new DateTime(2025, 5, 16, 10, 32, 33, 79, DateTimeKind.Utc).AddTicks(1775),
                            Description = "Three bestselling sci-fi novels.",
                            ImageUrl = "/images/products/scifi-books.jpg",
                            IsAvailable = true,
                            Name = "The Sci-Fi Novel Collection",
                            Price = 29.99m,
                            Sku = "BOOK-SCIFI-001",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("e6097226-3a38-4a82-ac10-8ddb5a8819ce"),
                            CategoryId = new Guid("e83019c1-0ac6-46da-bca9-6e8962247266"),
                            DateCreated = new DateTime(2025, 5, 21, 10, 32, 33, 79, DateTimeKind.Utc).AddTicks(1792),
                            Description = "Comfortable and stylish.",
                            ImageUrl = "/images/products/tshirt-men.jpg",
                            IsAvailable = true,
                            Name = "Men's Classic Cotton T-Shirt",
                            Price = 19.95m,
                            Sku = "APRL-TSHRT-001",
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = new Guid("502d001e-2b58-43f2-8e04-6f2309b31721"),
                            CategoryId = new Guid("e83019c1-0ac6-46da-bca9-6e8962247266"),
                            DateCreated = new DateTime(2025, 5, 26, 10, 32, 33, 79, DateTimeKind.Utc).AddTicks(1796),
                            Description = "Light and airy, perfect for summer.",
                            ImageUrl = "/images/products/dress-women.jpg",
                            IsAvailable = false,
                            Name = "Women's Summer Dress",
                            Price = 45.00m,
                            Sku = "APRL-DRESS-001",
                            StockQuantity = 75
                        });
                });

            modelBuilder.Entity("ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d9cea9e-2488-49a2-b667-c4295527dcef"),
                            DateAdded = new DateTime(2025, 6, 3, 10, 32, 33, 79, DateTimeKind.Utc).AddTicks(1917),
                            ProductId = new Guid("a3f1d105-f357-4173-9a62-be533aa7dd99"),
                            Quantity = 1,
                            UserId = new Guid("23476a76-c69a-4bef-8c68-467832b72c4f")
                        },
                        new
                        {
                            Id = new Guid("7791b420-259d-4039-bb3a-1519cecf0c3e"),
                            DateAdded = new DateTime(2025, 6, 4, 10, 32, 33, 79, DateTimeKind.Utc).AddTicks(1922),
                            ProductId = new Guid("e6097226-3a38-4a82-ac10-8ddb5a8819ce"),
                            Quantity = 2,
                            UserId = new Guid("23476a76-c69a-4bef-8c68-467832b72c4f")
                        },
                        new
                        {
                            Id = new Guid("27c92d8f-9826-4917-8f1c-0b1f5a828527"),
                            DateAdded = new DateTime(2025, 6, 5, 5, 32, 33, 79, DateTimeKind.Utc).AddTicks(2022),
                            ProductId = new Guid("fe95b471-f8eb-40ad-9400-9b1a9e01f890"),
                            Quantity = 1,
                            UserId = new Guid("64d8122e-5e3c-4ba8-ad31-0709286d9783")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project1.Models.OrderItem", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project1.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project1.Models.Product", b =>
                {
                    b.HasOne("Project1.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoppingCartItem", b =>
                {
                    b.HasOne("Project1.Models.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Project1.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Project1.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
